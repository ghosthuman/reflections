Q. What happens when you initialize a repository? Why do you need to do it?
A.Initializing a repository maybe makes the directory git compatible. This ensures that all the directory becomes a repository and all the files can be handled.

Q. How is the staging area different from the working directory and the repository? What value do you think it offers?
A. The working directory is the place where though all the files are present, none are tracked/managed by git. The staging area is like a transtition phase between the working directory and the repository in the sense that, the files in the staging are not commited like the repository, bu are still tracked by the git. It gives a rough canvas, where we can be sure if we really want to commit a file or not.

Q. How can you use the staging area to make sure you have one commit per logical change?
A. After making the changes in the working directory, we can choose to only add one change to the staging area. This enables us to commit only that change, hence separating the changes logically. After commiting that change, the files relating to the next single logical change can be loaded onto the staging area, which then can be commited. And so on. This helps us by allowing us to make several changes at one time, but commiting them separately.

Q. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A. In situations like, as mentioned in the videos, experimentation with not a clear intent to incorporate into the main project, branches seem helpful. So, if i wanted to try taking my project in a different direction, about which i wasn't sure would improve the quality of the software, i would like to make the changes in the new branch and keep working on it as a side project, while simultaneously continuing the main project. This gives me the option to later incorporate or discard the expiremented branch as required.

Q. How do the diagrams help you visualize the branch structure?
A. Diagrams provides clarity to the entire branching concepts. By being able to visualize the branch strucuture the neccessity to how and when to involve new branches becomes apparent which helps in maintaining a clear robust strucutre of the project.

Q. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A. The two branches form a common tip with the name corresponding to the currently checkedout branch. So we get a commit  which includes the properties of both the branches. We represent it in that way because, after merging the new commit (the tip) has 2 parents, least commits of each of the branches. And since git works on parent-child concept rather than branches, it is sensible to show both the parents. Though later on we can sever the one of the branches to keep only the master or dominant branch available. The severing is optional.